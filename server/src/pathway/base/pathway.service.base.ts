/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Pathway, Object, User } from "@prisma/client";

export class PathwayServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PathwayFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PathwayFindManyArgs>
  ): Promise<number> {
    return this.prisma.pathway.count(args);
  }

  async findMany<T extends Prisma.PathwayFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PathwayFindManyArgs>
  ): Promise<Pathway[]> {
    return this.prisma.pathway.findMany(args);
  }
  async findOne<T extends Prisma.PathwayFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PathwayFindUniqueArgs>
  ): Promise<Pathway | null> {
    return this.prisma.pathway.findUnique(args);
  }
  async create<T extends Prisma.PathwayCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PathwayCreateArgs>
  ): Promise<Pathway> {
    return this.prisma.pathway.create<T>(args);
  }
  async update<T extends Prisma.PathwayUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PathwayUpdateArgs>
  ): Promise<Pathway> {
    return this.prisma.pathway.update<T>(args);
  }
  async delete<T extends Prisma.PathwayDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PathwayDeleteArgs>
  ): Promise<Pathway> {
    return this.prisma.pathway.delete(args);
  }
  async findObjects(
    parentId: string,
    args: Prisma.ObjectFindManyArgs
  ): Promise<Object[]> {
    return this.prisma.pathway
      .findUnique({
        where: { id: parentId },
      })
      .objects(args);
  }
  async getOwner(parentId: string): Promise<User | null> {
    return this.prisma.pathway
      .findUnique({
        where: { id: parentId },
      })
      .owner();
  }
}
